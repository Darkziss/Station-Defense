//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace StationDefense
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""5dbc9b56-6e05-429c-a3db-668f08fde1bb"",
            ""actions"": [
                {
                    ""name"": ""SelectCannon"",
                    ""type"": ""Value"",
                    ""id"": ""98178cff-5f0f-4cd6-b553-4b5f4e37a8f7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""d2f2491f-fb21-4efd-8005-8ec190e8c11c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""f3abb689-6faf-4fab-a5d6-1d9fcd47008c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PowerfulShoot"",
                    ""type"": ""Button"",
                    ""id"": ""2128cabc-c674-4c96-843b-89f069abaa45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CircleShoot"",
                    ""type"": ""Button"",
                    ""id"": ""b2797b48-3693-412b-badb-2d9bf97a9b89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetCannon"",
                    ""type"": ""Button"",
                    ""id"": ""4dcc251f-1d70-4962-afba-6f58dc77081a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""68586586-331b-4ed7-94ff-e1b86d07b46f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf82ce2f-fef1-418a-892b-66f1accd5ab8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Select"",
                    ""id"": ""89cb0e97-ac83-4a8f-a693-cd360d94f981"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectCannon"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""95dd54d8-e6ef-45f6-8395-ff43280ae504"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""SelectCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa26b12c-b189-4a96-83e1-cb024e1bfe19"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""SelectCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8a635378-6bc6-4894-ba72-76efd9ef5b14"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""SelectCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3679d9df-c90e-4643-a25b-c40c9f4a803d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""SelectCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fc0d46d9-dcaa-40b8-868e-10cfe35cfddb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""ResetCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d1bbec4-03fd-4e5a-863d-001da03e9e77"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""PowerfulShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""199b1af1-6dfa-40c4-a13f-c389c74e111f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Desktop"",
                    ""action"": ""CircleShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Main
            m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
            m_Main_SelectCannon = m_Main.FindAction("SelectCannon", throwIfNotFound: true);
            m_Main_Look = m_Main.FindAction("Look", throwIfNotFound: true);
            m_Main_Shoot = m_Main.FindAction("Shoot", throwIfNotFound: true);
            m_Main_PowerfulShoot = m_Main.FindAction("PowerfulShoot", throwIfNotFound: true);
            m_Main_CircleShoot = m_Main.FindAction("CircleShoot", throwIfNotFound: true);
            m_Main_ResetCannon = m_Main.FindAction("ResetCannon", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Main
        private readonly InputActionMap m_Main;
        private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
        private readonly InputAction m_Main_SelectCannon;
        private readonly InputAction m_Main_Look;
        private readonly InputAction m_Main_Shoot;
        private readonly InputAction m_Main_PowerfulShoot;
        private readonly InputAction m_Main_CircleShoot;
        private readonly InputAction m_Main_ResetCannon;
        public struct MainActions
        {
            private @PlayerInput m_Wrapper;
            public MainActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @SelectCannon => m_Wrapper.m_Main_SelectCannon;
            public InputAction @Look => m_Wrapper.m_Main_Look;
            public InputAction @Shoot => m_Wrapper.m_Main_Shoot;
            public InputAction @PowerfulShoot => m_Wrapper.m_Main_PowerfulShoot;
            public InputAction @CircleShoot => m_Wrapper.m_Main_CircleShoot;
            public InputAction @ResetCannon => m_Wrapper.m_Main_ResetCannon;
            public InputActionMap Get() { return m_Wrapper.m_Main; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
            public void AddCallbacks(IMainActions instance)
            {
                if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
                @SelectCannon.started += instance.OnSelectCannon;
                @SelectCannon.performed += instance.OnSelectCannon;
                @SelectCannon.canceled += instance.OnSelectCannon;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @PowerfulShoot.started += instance.OnPowerfulShoot;
                @PowerfulShoot.performed += instance.OnPowerfulShoot;
                @PowerfulShoot.canceled += instance.OnPowerfulShoot;
                @CircleShoot.started += instance.OnCircleShoot;
                @CircleShoot.performed += instance.OnCircleShoot;
                @CircleShoot.canceled += instance.OnCircleShoot;
                @ResetCannon.started += instance.OnResetCannon;
                @ResetCannon.performed += instance.OnResetCannon;
                @ResetCannon.canceled += instance.OnResetCannon;
            }

            private void UnregisterCallbacks(IMainActions instance)
            {
                @SelectCannon.started -= instance.OnSelectCannon;
                @SelectCannon.performed -= instance.OnSelectCannon;
                @SelectCannon.canceled -= instance.OnSelectCannon;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @Shoot.started -= instance.OnShoot;
                @Shoot.performed -= instance.OnShoot;
                @Shoot.canceled -= instance.OnShoot;
                @PowerfulShoot.started -= instance.OnPowerfulShoot;
                @PowerfulShoot.performed -= instance.OnPowerfulShoot;
                @PowerfulShoot.canceled -= instance.OnPowerfulShoot;
                @CircleShoot.started -= instance.OnCircleShoot;
                @CircleShoot.performed -= instance.OnCircleShoot;
                @CircleShoot.canceled -= instance.OnCircleShoot;
                @ResetCannon.started -= instance.OnResetCannon;
                @ResetCannon.performed -= instance.OnResetCannon;
                @ResetCannon.canceled -= instance.OnResetCannon;
            }

            public void RemoveCallbacks(IMainActions instance)
            {
                if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMainActions instance)
            {
                foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MainActions @Main => new MainActions(this);
        private int m_DesktopSchemeIndex = -1;
        public InputControlScheme DesktopScheme
        {
            get
            {
                if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
                return asset.controlSchemes[m_DesktopSchemeIndex];
            }
        }
        public interface IMainActions
        {
            void OnSelectCannon(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnPowerfulShoot(InputAction.CallbackContext context);
            void OnCircleShoot(InputAction.CallbackContext context);
            void OnResetCannon(InputAction.CallbackContext context);
        }
    }
}
